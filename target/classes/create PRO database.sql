/*SQLyog Ultimate v8.5 MySQL - 5.5.23 : Database - zepk_kns_pro**********************************************************************//*!40101 SET NAMES utf8 */;/*!40101 SET SQL_MODE=''*/;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;/*Table structure for table `ds_group` */DROP TABLE IF EXISTS `ds_group`;CREATE TABLE `ds_group` (  `id` varchar(255) NOT NULL,  `relation` varchar(255) DEFAULT NULL COMMENT 'Родительская группа',  `name` varchar(80) NOT NULL DEFAULT '' COMMENT 'Название группы (рус)',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 CHECKSUM=1 DELAY_KEY_WRITE=1 ROW_FORMAT=DYNAMIC COMMENT='Группы данных';/*Data for the table `ds_group` *//*Table structure for table `ds_history` */DROP TABLE IF EXISTS `ds_history`;CREATE TABLE `ds_history` (  `fk_ds_list` int(10) unsigned NOT NULL,  `value` varchar(80) NOT NULL DEFAULT '' COMMENT 'Значение ячейки',  `create_date` datetime NOT NULL COMMENT 'Время сохранения значения',  KEY `create_date` (`create_date`),  KEY `composite_index` (`fk_ds_list`,`create_date`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 CHECKSUM=1 DELAY_KEY_WRITE=1 ROW_FORMAT=DYNAMIC COMMENT='История ячеек (статистика)';/*Data for the table `ds_history` *//*Table structure for table `ds_list` */DROP TABLE IF EXISTS `ds_list`;CREATE TABLE `ds_list` (  `id` varchar(255) NOT NULL COMMENT 'project.object.cell',  `id_hash` int(10) unsigned NOT NULL COMMENT 'Hash значение для поля id',  `fk_ds_group` varchar(255) DEFAULT NULL,  `fk_object` varchar(255) NOT NULL,  `type` varchar(10) NOT NULL COMMENT 'Тип значения (str, float, int, uint, date, bool)',  `value` varchar(80) NOT NULL DEFAULT '' COMMENT 'Значение ячейки',  `update_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Время обновления значения',  `descr` varchar(255) DEFAULT NULL COMMENT 'Название ячейки (рус)',  `csd_changed` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Используется в проекте sync',  `has_history` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1 - необходимо вести историю параметра ',  PRIMARY KEY (`id_hash`),  UNIQUE KEY `id` (`id`),  KEY `fk_group` (`fk_ds_group`),  KEY `FK_ds_list_object` (`fk_object`),  CONSTRAINT `FK_ds_list_object` FOREIGN KEY (`fk_object`) REFERENCES `object` (`id`) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8 CHECKSUM=1 DELAY_KEY_WRITE=1 ROW_FORMAT=DYNAMIC COMMENT='Ячейки данных';/*Data for the table `ds_list` *//*Table structure for table `object` */DROP TABLE IF EXISTS `object`;CREATE TABLE `object` (  `id` varchar(255) NOT NULL DEFAULT '' COMMENT 'project.object',  `fk_project` varchar(255) NOT NULL DEFAULT '',  `name` varchar(80) NOT NULL DEFAULT '' COMMENT 'Название объекта (рус)',  PRIMARY KEY (`id`),  KEY `FK_object` (`fk_project`),  CONSTRAINT `FK_object_project` FOREIGN KEY (`fk_project`) REFERENCES `project` (`id`) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8 CHECKSUM=1 DELAY_KEY_WRITE=1 ROW_FORMAT=DYNAMIC COMMENT='Объекты';/*Data for the table `object` *//*Table structure for table `project` */DROP TABLE IF EXISTS `project`;CREATE TABLE `project` (  `id` varchar(255) NOT NULL DEFAULT '' COMMENT 'project',  `name` varchar(80) NOT NULL DEFAULT '' COMMENT 'Название проекта (рус)',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 CHECKSUM=1 DELAY_KEY_WRITE=1 ROW_FORMAT=DYNAMIC COMMENT='Проекты';/*Data for the table `project` *//* Procedure structure for procedure `update_cell` *//*!50003 DROP PROCEDURE IF EXISTS  `update_cell` */;DELIMITER $$/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `update_cell`(IN cell_id VARCHAR(255), IN cell_value VARCHAR(255), IN cell_date DATETIME)BEGIN    -- наименьший допустимый год в дате ячейки    DECLARE LOW_BOUND_YEAR INT DEFAULT 2009;    -- SYSDATE + HIGH_BOUND_DELTA_MIN = наибольшая допустимая дата ячейки    DECLARE HIGH_BOUND_DELTA_MIN INT DEFAULT 360;        -- отсекаем даты вне допустимого диапозона    IF (YEAR(cell_date) >= LOW_BOUND_YEAR) AND (cell_date <= NOW() + INTERVAL HIGH_BOUND_DELTA_MIN MINUTE) THEN    BEGIN	DECLARE ldatetime DATETIME;	DECLARE lvalue VARCHAR(255);			DECLARE hasHistory BOOL;	DECLARE idHash INT(10) UNSIGNED;				START TRANSACTION;	-- получаем последнее состояние ячейки	SELECT update_date,value,has_history,id_hash INTO ldatetime,lvalue,hasHistory,idHash FROM ds_list WHERE id=cell_id LIMIT 1;	IF (cell_date < ldatetime) AND (ldatetime < NOW()) THEN	BEGIN	    IF hasHistory THEN		INSERT INTO ds_history (fk_ds_list,value,create_date) VALUES (idHash, cell_value, cell_date);	    END IF;		END;	ELSE BEGIN	    IF hasHistory THEN	    BEGIN			INSERT INTO ds_history (fk_ds_list,value,create_date) VALUES (idHash, lvalue, ldatetime);	    END;		    END IF;		    UPDATE ds_list SET update_date=cell_date, value=cell_value, csd_changed=1 WHERE id=cell_id;	END;	END IF;	COMMIT;    END;    END IF;END */$$DELIMITER ;/* Procedure structure for procedure `update_cells` *//*!50003 DROP PROCEDURE IF EXISTS  `update_cells` */;DELIMITER $$/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `update_cells`(IN cellIds LONGTEXT, IN cellValues LONGTEXT, IN cellDate DATETIME, OUT updatedCellIds LONGTEXT)BEGIN    -- наименьший допустимый год в дате ячейки    DECLARE LOW_BOUND_YEAR INT DEFAULT 2009;    -- SYSDATE + HIGH_BOUND_DELTA_MIN = наибольшая допустимая дата ячейки    DECLARE HIGH_BOUND_DELTA_MIN INT DEFAULT 360;    SET updatedCellIds = '';    -- отсекаем даты вне допустимого диапозона    IF (YEAR(cellDate) >= LOW_BOUND_YEAR) AND (cellDate <= NOW() + INTERVAL HIGH_BOUND_DELTA_MIN MINUTE) THEN    BEGIN	DECLARE _DELIMITER CHAR(2) DEFAULT '&&';	DECLARE DELIMITER_LENGTH INT(10) DEFAULT LENGTH(_DELIMITER);	DECLARE lastDatetime DATETIME;	DECLARE lastValue VARCHAR(255);	DECLARE hasHistory BOOL;	DECLARE idHash INT(10) UNSIGNED;	DECLARE startCellId INT(10) DEFAULT 1;	DECLARE stopCellId INT(10) DEFAULT 0;	DECLARE startCellValue INT(10) DEFAULT 1;	DECLARE stopCellValue INT(10) DEFAULT 0;	DECLARE cellId VARCHAR(255);	DECLARE cellValue VARCHAR(255);	START TRANSACTION;loopLabel: LOOP	SET stopCellId = LOCATE(_DELIMITER, cellIds, startCellId);	SET stopCellValue = LOCATE(_DELIMITER, cellValues, startCellValue);	IF stopCellId = 0 THEN	BEGIN	    SET cellId = SUBSTRING(cellIds, startCellId);	    SET cellValue = SUBSTRING(cellValues, startCellValue);	END;	ELSE BEGIN	    SET cellId = SUBSTRING(cellIds, startCellId, stopCellId - startCellId);	    SET cellValue = SUBSTRING(cellValues, startCellValue, stopCellValue - startCellValue);	END;	END IF;	-- получаем последнее состояние ячейки	SELECT update_date, value, has_history, id_hash 	    INTO lastDatetime, lastValue, hasHistory, idHash 	FROM ds_list WHERE id=cellId LIMIT 1;	    	IF (cellDate < lastDatetime) AND (lastDatetime < NOW()) THEN	BEGIN	    IF hasHistory THEN		INSERT INTO ds_history (fk_ds_list, value, create_date) VALUES (idHash, cellValue, cellDate);	    END IF;		END;	ELSE BEGIN	    IF hasHistory THEN	    BEGIN		        INSERT INTO ds_history (fk_ds_list, value, create_date) VALUES (idHash, lastValue, lastDatetime);	    END;		    END IF;	    	    UPDATE ds_list SET update_date=cellDate, value=cellValue, csd_changed=1 WHERE id=cellId;	    IF (LENGTH(updatedCellIds) = 0) THEN	    BEGIN	        SET updatedCellIds = cellId;	    END;	    ELSE BEGIN	        SET updatedCellIds = CONCAT(updatedCellIds, ',', cellId);	    END;	    END IF;	END;	END IF;	IF stopCellId = 0 THEN	BEGIN	    LEAVE loopLabel;	END;	ELSE BEGIN	    SET startCellId = stopCellId + DELIMITER_LENGTH;	    SET startCellValue = stopCellValue + DELIMITER_LENGTH;	END;	END IF;	END LOOP;	COMMIT;    END;    END IF;END */$$DELIMITER ;/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;